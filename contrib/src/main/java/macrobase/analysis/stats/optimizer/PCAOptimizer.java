package macrobase.analysis.stats.optimizer;

import macrobase.analysis.stats.optimizer.util.PCASVD;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;


public class PCAOptimizer extends Optimizer {
    private static int[] indicesA, indicesB;

    private static final Logger log = LoggerFactory.getLogger(PCAOptimizer.class);

    public PCAOptimizer(double epsilon, double lbr) {
        super(epsilon, lbr);
    }

    @Override
    public void preprocess(int minReducedDim) {
        // Implementation of PAA. TODO: clean it up at some point...
        assert (this.N % minReducedDim == 0 );
        RealVector currVec;
        double temp;
        int entriesAveraged = this.N / minReducedDim;
        this.dataMatrix = new Array2DRowRealMatrix(this.M, minReducedDim);
        this.Nproc = minReducedDim;

        for (int i = 0; i < this.M; i++){
            currVec = this.rawDataMatrix.getRowVector(i);
            temp = 0;
            for (int j = 0; j < this.N; j++){
                if (j % entriesAveraged == 0 && j != 0){
                    this.dataMatrix.setEntry(i, j/entriesAveraged - 1,temp/entriesAveraged);
                    temp = 0;
                }
                temp += currVec.getEntry(j);
                if (j == this.N - 1){
                    this.dataMatrix.setEntry(i,this.N/entriesAveraged - 1, temp/entriesAveraged);
                }
            }
        }
    }

    @Override
    public RealMatrix transform(int K, int Nt) {
        RealMatrix trainMatrix = this.dataMatrix.getSubMatrix(0, Nt-1, 0, this.Nproc - 1);
        PCASVD pca = new PCASVD(trainMatrix);

        RealMatrix retVal = pca.transform(this.dataMatrix,K);
        return retVal;
    }

    //TODO: this shouldn't be here. refactor DROP to be just DROP v1 w/out skiing or bootstrap
   public double[] blbLBRAttained(int iter, double epsilon, RealMatrix transformedData, int b, int s){
       if (iter == 0){
           return new double[] {0.0, 0.0, 0.0};
       }
       int currNt = this.getNtList(iter);
       int[] allIndices = new int[this.N];
       int K = transformedData.getColumnDimension();
       for (int i = 0; i < this.N; i++){
           allIndices[i] = i; //TODO: this is stupid
       }
       int[] kIndices = Arrays.copyOf(allIndices,K);

       int num_pairs = (this.M - currNt)*((this.M - currNt) - 1)/2;
       int threshL = new Double((epsilon/2)*num_pairs).intValue();
       int threshH = new Double((1 - epsilon/2)*num_pairs).intValue();
       double lower = 0;
       double mean = 0;
       double upper = 0;
       HashMap<List<Integer>, Double> LBRs = new HashMap<>(); //pair -> distance
       Double[][] LBRValCard = new Double[b][2];

       double tLower, tMean, tUpper;
       double lbr;
       double card;
       double currCount;
       int currIter;


       Random rand = new Random();
       int[] indicesA = new int[b];
       int[] indicesB = new int[b];

       List<Double> tempLBR;
       RealVector transformedDists;
       RealVector trueDists;
       RealVector multinomialVals;

       for (int i = 0; i < s; i++){
           // sample w/out replacement from whole set, b times, so b distinct pairs
           for (int j = 0; j < b; j++){
               indicesA[j] = rand.nextInt(this.M - currNt) + currNt;
               indicesB[j] = rand.nextInt(this.M - currNt) + currNt;
               while (indicesA[j] == indicesB[j] ||
                       LBRs.containsKey(new ArrayList<>(Arrays.asList(indicesA[j], indicesB[j]))) ||
                       LBRs.containsKey(new ArrayList<>(Arrays.asList(indicesB[j], indicesA[j])))){
                   indicesA[j] = rand.nextInt(this.M - currNt) + currNt;
                   indicesB[j] = rand.nextInt(this.M - currNt) + currNt;
               }
               LBRs.put(new ArrayList<>(Arrays.asList(indicesA[j], indicesB[j])), 0.0);
           }
           // compute lbr over those b distinct pairs.
           // It is super ugly to do this in two separate for loops, but easier to check and stuff
           transformedDists = this.calcDistances(transformedData.getSubMatrix(indicesA,kIndices), transformedData.getSubMatrix(indicesB, kIndices)).mapMultiply(Math.sqrt(this.N/this.Nproc));
           trueDists = this.calcDistances(this.rawDataMatrix.getSubMatrix(indicesA,allIndices), this.rawDataMatrix.getSubMatrix(indicesB,allIndices));
           tempLBR =  this.LBRList(trueDists, transformedDists);
           for (int j = 0; j < b; j++){
               LBRs.put(new ArrayList<>(Arrays.asList(indicesA[j], indicesB[j])), tempLBR.get(j));
           }

           // sample (n choose 2) (or num_pairs) times with replacement from b, use multinomial trick
           multinomialVals = this.multinomial(num_pairs, b);

           //compute bootstrap Tmean, Tlower, Tupper on b
           tMean = 0;
           tLower = 0;
           tUpper = 0;
           for (int j = 0; j < b; j++){
               lbr = LBRs.get(new ArrayList<>(Arrays.asList(indicesA[j], indicesB[j])));
               card  = multinomialVals.getEntry(j);
               tMean += card * lbr;

               LBRValCard[j][0] = lbr;
               LBRValCard[j][1] = card;
           }
            tMean /= num_pairs;

           // sort the lbr-cardinality array by lbr
           Arrays.sort(LBRValCard, new Comparator<Double[]>() {
               @Override
               public int compare(Double[] d1, Double[] d2) {
                   Double k1 = d1[0];
                   Double k2 = d2[0];
                   return k1.compareTo(k2);
               }
           });

           currIter = 0;
           currCount = 0;
           while (currCount < threshL){
               currCount += LBRValCard[currIter++][1];
           }
           tLower = LBRValCard[currIter][0];
           while (currCount < threshH){
               currCount += LBRValCard[currIter++][1];
           }
           tUpper = LBRValCard[currIter][0];

           mean += tMean/s;
           lower += tLower/s;
           upper += tUpper/s;

       }
       //return mean;
       return new double[] {lower, mean,upper};
   }




    @Override
    public double LBRAttained(int iter, double epsilon, RealMatrix transformedData) {
        if (iter == 0){
            //For testing against python
            //int[] indicesA = {314, 1200, 1179, 773, 992, 859, 331, 352, 902, 608, 67, 271, 651, 317, 785, 1289, 978, 892, 496, 797, 1015, 158, 1416, 897, 1056, 1148, 1180, 1273, 243, 1220, 1086, 449, 186, 854, 1175, 314, 916, 106, 155, 1391, 208, 1011, 1237, 1193, 526, 580, 387, 67, 711, 1169, 632, 789, 1292, 309, 91, 162, 621, 561, 64, 564, 255, 1223, 141, 1080, 257, 1419, 1029, 642, 894, 439, 624, 210, 1134, 964, 649, 1200, 685, 1374, 1078, 1090, 581, 1311, 223, 804, 68, 847, 1286, 34, 1277, 317, 573, 998, 777, 895, 1399, 26, 242, 352, 1287, 1123, 899, 898, 749, 425, 894, 1039, 1170, 978, 1389, 1308, 969, 110, 60, 721, 444, 912, 503, 1133, 668, 816, 803, 1218, 846, 637, 923, 446, 1226, 197, 433, 1105, 611, 810, 1283, 871, 1297, 377, 371, 412, 912, 376, 499, 1128, 1022, 147, 995, 853, 1186, 1070, 586, 1156, 593, 984, 320, 269, 513, 417, 14, 1231, 405, 574, 1304, 716, 210, 600, 616, 846, 837, 965, 1019, 645, 1080, 1125, 788, 746, 64, 1105, 1032, 549, 531, 396, 1049, 1354, 1315, 766, 1006, 146, 1008, 752, 415, 1073, 717, 979, 1333, 46, 867, 575, 1068, 1330, 534, 1072, 765, 1303, 48, 384, 881, 1140, 325, 762, 884, 813, 11, 1113, 282, 1217, 414, 459, 688, 1015, 373, 454, 1047, 829, 866, 1275, 623, 525, 556, 755, 396, 750, 621, 143, 1169, 1348, 199, 1212, 293, 129, 673, 534, 1123, 867, 990, 472, 857, 1084, 1297, 1339, 128, 1256, 521, 160, 1240, 257, 800, 979, 203, 370, 481, 439, 573, 1166, 1087, 628, 458, 309, 415, 1391, 556, 296, 265, 1173, 1243, 1218, 817, 952, 259, 242, 216, 134, 294, 9, 59, 929, 964, 994, 314, 315, 1056, 1050, 1110, 201, 583, 1225, 781, 933, 156, 81, 579, 866, 1069, 945, 1336, 125, 581, 274, 798, 622, 50, 122, 193, 536, 697, 760, 745, 266, 1287, 834, 1038, 263, 232, 1074, 211, 946, 58, 589, 1099, 453, 1201, 1065, 713, 473, 66, 1312, 472, 1041, 407, 506, 25, 22, 945, 685, 1200, 360, 298, 1134, 1380, 91, 931, 401, 988, 1388, 862, 588, 751, 151, 103, 1148, 981, 980, 1108, 58, 891, 752, 487, 1031, 802, 901, 491, 59, 620, 99, 356, 880, 398, 1239, 655, 1258, 13, 244, 940, 1256, 790, 880, 925, 116, 1257, 1254, 188, 353, 136, 1247, 41, 8, 96, 372, 650, 1092, 1387, 242, 454, 1409, 631, 1330, 799, 365, 1413, 603, 961, 417, 993, 222, 162, 1271, 284, 53, 309, 238, 1309, 675, 1259, 122, 497, 339, 1336, 975, 1161, 1161, 385, 760, 306, 1185, 1119, 1334, 782, 581, 314, 380, 1020, 210, 263, 1175, 249, 95, 63, 1386, 1107, 1206, 1183, 997, 1166, 157, 725, 125, 418, 715, 123, 244, 712, 579, 677, 226, 535, 980, 1244, 240, 170, 585, 621, 836, 476, 613, 1308, 511, 787, 1317, 1061, 900, 654, 1396, 177, 824, 1064, 850, 522, 1296, 1303, 1048, 1157, 525, 694, 1339, 797, 10, 866, 532, 42, 196, 358, 1355, 564, 1157, 424, 1089, 66, 618, 1044, 847, 700, 640, 609, 1338, 961, 233, 1153, 1407, 585, 892, 761, 1397, 537, 325, 1256, 378, 916, 878, 168, 656, 1383, 1206, 944, 713, 1037, 1089, 1291, 1291, 192, 107, 383, 618, 411, 1219, 848, 1096, 862, 1162, 1001, 631, 79, 469, 1085, 937, 129, 345, 417, 732, 86, 1087, 124, 1265, 169, 16, 425, 877, 324, 575, 1199, 1300, 604, 494, 394, 743, 987, 436, 448, 101, 861, 384, 335, 108, 77, 368, 254, 747, 979, 1387, 106, 265, 596, 375, 713, 741, 715, 969, 560, 1336, 500, 1403, 160, 8, 585, 435, 128, 380, 443, 621, 283, 1124, 1414, 182, 898, 1245, 857, 710, 104, 940, 369, 671, 1298, 1354, 1408, 1058, 1181, 849, 759, 805, 935, 446, 502, 897, 134, 1143, 1010, 90, 484, 261, 1030, 630, 661, 832, 25, 596, 1221, 1249, 933, 541, 540, 779, 494, 335, 1361, 1197, 203, 377, 736, 483, 24, 108, 993, 1414, 1111, 862, 572, 1223, 710, 211, 624, 420, 613, 105, 1083, 682, 523, 175, 169, 762, 1020, 89, 507, 211, 946, 1403, 157, 1363, 1224, 851, 1292, 313, 98, 381, 1176, 1363, 49, 1120, 191, 181, 604, 525, 1043, 51, 1264, 1101, 548, 544, 65, 1270, 1237, 948, 249, 1134, 610, 693, 27, 1338, 125, 769, 551, 513, 152, 347, 1085, 1341, 54, 75, 1059, 35, 123, 925, 1278, 347, 491, 1221, 260, 90, 1012, 16, 870, 936, 131, 678, 249, 1403, 815, 357, 953, 329, 984, 1378, 192, 815, 1266, 703, 602, 893, 92, 509, 305, 1071, 1412, 1147, 1234, 1336, 749, 1396, 43, 561, 123, 1222, 1025, 600, 204, 1055, 1224, 1342, 741, 363, 128, 680, 696, 1249, 1301, 628, 855, 800, 1131, 640, 783, 976, 958, 950, 1315, 1027, 1099, 624, 1042, 880, 577, 53, 1088, 356, 1204, 108, 284, 157, 1010, 1204, 282, 828, 1246, 41, 174, 486, 602, 477, 45, 427, 318, 512, 560, 975, 953, 1037, 69, 691, 803, 412, 780, 322, 1107, 529, 1072, 1131, 313, 1005, 427, 1282, 161, 340, 868, 1066, 193, 625, 579, 1048, 17, 513, 1015, 797, 321, 407, 214, 311, 864, 56, 1198, 1406, 775, 502, 667, 315, 119, 838, 288, 497, 290, 501, 485, 805, 645, 867, 468, 23, 511, 585, 457, 1412, 1126, 1245, 422, 1093, 1044, 809, 438, 1212, 14, 4, 58, 1388, 884, 910, 811, 648, 1220, 1097, 203, 1319, 1094, 245, 1149, 390, 1155, 1071, 1271, 505, 909, 757, 1193, 14, 646, 87, 217, 1255, 528, 1074, 545, 921, 694, 826, 741, 475, 92, 919, 698, 1323, 1358, 1221, 508, 1292, 1015, 564, 498, 1112, 1291, 1364, 695, 195, 1088, 984, 212, 18, 632, 344, 318, 1292, 545, 1356, 1321, 204, 1243, 1369, 500, 36, 370, 1169, 1295, 1045, 1165, 271, 739, 1349, 1148, 328, 951, 1022, 1294, 87, 610, 718, 1057, 1329, 643, 878, 1393, 879, 569, 1102, 4, 108, 375, 708, 546, 249, 225, 957, 577, 624, 1344, 411, 826, 539, 1408, 94, 1107, 277, 811, 831, 246, 1392, 1261, 498, 1055, 57, 829, 99, 1312, 988, 1118, 423, 1347, 1357, 323, 894, 876, 1217, 1366, 83, 487, 930, 660, 1200, 1015, 997, 1156, 377, 1092, 1139, 416, 918, 669, 1260, 1043, 662, 1114, 140, 278, 881, 1188, 365, 479, 284, 1110, 948, 332, 451, 354, 82, 207, 812, 325, 737, 1066, 537, 140, 814, 966, 936, 435, 1074, 222, 513, 1317, 396, 772, 1288, 176, 1179, 702, 283, 168, 1274, 1358, 478, 440, 890, 71, 587, 485, 728, 919, 1247, 632, 1155, 78, 1346, 777, 226, 440, 486, 1275, 115, 1378, 593, 877, 88, 304, 330, 49, 9, 602, 408, 648, 317, 929, 724, 1050, 1050, 799, 681, 577, 215, 649, 539, 1016, 964, 192, 259, 461, 1163, 950, 368, 931, 601, 136, 478, 1199, 379, 139, 556, 284, 397, 724, 1208, 675, 829, 550, 1255, 1306, 184, 873, 96, 901, 231, 1150, 57, 1402, 982, 91, 409, 249, 697, 1030, 359, 90, 1186, 33, 697, 232, 101, 181, 461, 600, 1185, 142, 862, 601, 1279, 431, 747, 1090, 1051, 870, 645, 1393, 1359, 816, 244, 951, 104, 1415, 496, 458, 63, 332, 686, 240, 410, 1134, 111, 580, 1126, 599, 75, 1371, 845, 426, 456, 903, 86, 943, 919, 1169, 625, 1007, 819, 223, 811, 1242, 1143, 704, 407, 598, 1316, 1394, 702, 1117, 3, 1342, 296, 421, 1405, 1185, 122, 959, 1376, 826, 465, 184, 975, 430, 829, 918, 128, 780, 842, 358, 901, 244, 1202, 830, 530, 752, 397, 206, 1026, 359, 1242, 171, 893, 238, 1365, 871, 907, 1152, 1323, 38, 816, 1047, 746, 1043, 912, 537, 724, 1348, 1259, 276, 1315, 1096, 524, 1167, 690, 1101, 1411, 250, 356, 256, 988, 1264, 1282, 552, 52, 129, 898, 760, 636, 376, 288, 267, 911, 49, 1160, 911, 152, 1018, 1014, 635, 369, 923, 528, 1325, 357, 364, 1019, 441, 1315, 165, 1358, 131, 259, 1135, 269, 870, 1240, 358, 196, 469, 616, 152, 8, 1240, 1404, 204, 1197, 235, 927, 196, 518, 607, 402, 1258, 659, 1151, 1022, 397, 125, 804, 393, 881, 340, 1012, 792, 165, 655, 343, 1026, 894, 944, 972, 1397, 67, 506, 934, 1309, 322, 1192, 797, 1066, 1384, 843, 420, 63, 1248, 885, 897, 1101, 434, 1080, 29, 171, 277, 1190, 1006, 815, 915, 1010, 123, 207, 1218, 96, 927, 57, 1347, 2, 1377, 937, 415, 1375, 1061, 473, 6, 628, 723, 1154, 396, 500, 278, 456, 1292, 1261, 344, 447, 515, 95, 801, 402, 864, 740, 51, 357, 955, 222, 1068, 1117, 10, 1325, 826, 1300, 836, 221, 1301, 1103};
            //int[] indicesB = {726, 1077, 90, 249, 817, 15, 150, 400, 39, 90, 389, 266, 15, 185, 319, 1231, 597, 655, 448, 519, 1119, 1280, 199, 534, 431, 1168, 956, 546, 858, 342, 17, 285, 1099, 629, 461, 1187, 705, 860, 435, 4, 840, 1165, 341, 1416, 975, 175, 1150, 1083, 1265, 797, 1082, 289, 265, 423, 462, 681, 577, 1107, 824, 495, 804, 1345, 969, 423, 860, 15, 586, 496, 1380, 1005, 935, 499, 638, 792, 871, 178, 829, 118, 584, 1125, 1171, 866, 787, 581, 54, 652, 258, 197, 424, 1120, 39, 397, 830, 1338, 755, 1275, 1141, 28, 717, 1069, 757, 677, 1360, 1009, 643, 1065, 1025, 820, 1279, 1366, 154, 698, 1106, 779, 726, 1334, 48, 409, 556, 1118, 360, 874, 1103, 893, 996, 830, 315, 719, 577, 324, 654, 651, 303, 950, 1050, 1335, 177, 436, 447, 762, 966, 278, 1290, 264, 239, 920, 389, 588, 522, 740, 1060, 730, 1254, 632, 927, 712, 1110, 816, 600, 866, 560, 1270, 471, 674, 307, 606, 1217, 868, 926, 184, 605, 411, 83, 417, 412, 410, 347, 588, 154, 902, 665, 742, 1402, 950, 341, 1379, 1119, 337, 981, 1328, 238, 1370, 193, 43, 1087, 495, 144, 1368, 950, 163, 863, 1390, 1168, 266, 622, 548, 717, 996, 1114, 751, 992, 23, 416, 155, 1163, 445, 1273, 822, 317, 195, 1343, 1130, 362, 124, 707, 1166, 876, 693, 1416, 731, 958, 257, 1275, 1196, 1347, 1157, 1001, 545, 1027, 550, 172, 928, 737, 1251, 52, 999, 1038, 649, 846, 948, 1277, 901, 329, 734, 423, 313, 83, 637, 844, 457, 770, 1229, 577, 1071, 793, 968, 1061, 992, 943, 1353, 414, 194, 971, 421, 18, 321, 282, 976, 1056, 1408, 665, 929, 561, 1342, 398, 466, 103, 591, 263, 109, 616, 829, 387, 230, 748, 700, 617, 71, 1077, 210, 313, 460, 356, 906, 623, 1178, 0, 1183, 1341, 132, 1285, 265, 636, 725, 1274, 958, 915, 331, 1122, 604, 1362, 330, 355, 630, 1333, 902, 1396, 610, 327, 1114, 1234, 903, 380, 1055, 1333, 485, 286, 488, 1385, 34, 797, 976, 236, 1309, 447, 574, 1117, 1083, 789, 1052, 587, 1085, 578, 1229, 309, 1010, 339, 508, 141, 565, 530, 317, 264, 1247, 740, 925, 272, 623, 314, 1087, 1121, 1205, 852, 1365, 135, 349, 988, 293, 179, 507, 233, 83, 963, 689, 65, 357, 1131, 591, 264, 1337, 308, 69, 1411, 1373, 185, 1077, 247, 1103, 706, 1079, 980, 728, 711, 56, 1045, 545, 585, 712, 804, 141, 108, 560, 59, 332, 606, 688, 1184, 683, 834, 913, 1279, 699, 356, 1293, 1243, 965, 334, 428, 375, 69, 657, 798, 1093, 558, 519, 1108, 38, 460, 817, 221, 63, 1327, 1125, 172, 364, 715, 1252, 171, 987, 1171, 1089, 1140, 988, 126, 559, 175, 127, 1052, 842, 548, 1311, 1230, 991, 45, 1355, 178, 1275, 756, 106, 1129, 1344, 997, 835, 116, 605, 973, 241, 84, 402, 335, 954, 1079, 809, 304, 290, 166, 958, 551, 826, 1258, 33, 851, 110, 398, 603, 514, 49, 693, 1344, 1048, 892, 1356, 1337, 853, 201, 399, 1051, 1359, 557, 1066, 776, 803, 989, 189, 652, 603, 862, 156, 460, 514, 1000, 254, 211, 154, 143, 646, 835, 370, 1276, 841, 1359, 740, 96, 395, 298, 326, 978, 1042, 748, 81, 1175, 275, 731, 1098, 108, 1155, 758, 318, 1320, 1376, 2, 636, 513, 1412, 1181, 548, 279, 605, 1094, 594, 644, 445, 1226, 667, 331, 1259, 1163, 134, 510, 810, 1269, 1119, 556, 963, 230, 695, 919, 1037, 1100, 51, 424, 78, 1182, 454, 1084, 893, 558, 773, 1181, 323, 118, 410, 994, 1136, 1026, 872, 476, 406, 1214, 272, 1402, 1359, 510, 688, 657, 141, 1149, 1215, 416, 588, 1185, 774, 1327, 171, 3, 123, 728, 920, 656, 823, 767, 758, 515, 318, 735, 756, 1365, 754, 1015, 1006, 111, 125, 1313, 930, 1099, 1113, 1072, 71, 305, 961, 1009, 359, 579, 361, 1084, 813, 1151, 543, 73, 832, 309, 415, 1322, 738, 809, 1053, 535, 930, 328, 692, 157, 822, 654, 1065, 176, 199, 724, 754, 358, 481, 726, 582, 1178, 644, 335, 666, 1402, 1363, 677, 1129, 1366, 245, 200, 620, 1248, 380, 841, 1394, 72, 1174, 840, 1149, 1052, 279, 775, 1381, 1086, 926, 946, 1354, 1114, 1378, 1109, 906, 1098, 243, 702, 1133, 666, 93, 390, 766, 1144, 727, 1020, 1196, 617, 1295, 1326, 1330, 846, 1240, 703, 599, 988, 377, 605, 267, 949, 1179, 790, 529, 1346, 450, 884, 493, 722, 480, 1174, 1129, 1296, 144, 1323, 1381, 1165, 838, 10, 1030, 676, 1029, 35, 734, 1108, 522, 3, 1016, 1003, 957, 929, 394, 863, 920, 1197, 1364, 765, 1147, 922, 485, 664, 402, 43, 723, 1061, 556, 646, 830, 474, 516, 753, 754, 1150, 433, 1304, 987, 301, 786, 1419, 991, 321, 935, 837, 673, 869, 297, 1313, 164, 1406, 26, 64, 186, 662, 1140, 6, 256, 373, 736, 1180, 275, 677, 328, 591, 1332, 414, 310, 984, 247, 53, 613, 989, 1055, 490, 1305, 1235, 98, 28, 693, 989, 1205, 335, 1149, 1338, 1387, 862, 796, 225, 884, 192, 992, 927, 54, 540, 1160, 1219, 215, 1354, 973, 376, 1164, 1300, 167, 64, 778, 584, 20, 124, 443, 644, 1414, 936, 592, 274, 1223, 425, 1312, 240, 836, 1403, 1307, 1092, 1273, 779, 100, 471, 85, 308, 1056, 1137, 1370, 842, 38, 1054, 958, 93, 679, 643, 80, 1273, 992, 471, 307, 13, 975, 242, 833, 605, 805, 1288, 1004, 763, 359, 957, 150, 697, 913, 159, 917, 1220, 846, 536, 283, 357, 881, 877, 522, 326, 1404, 1128, 277, 1398, 1415, 1398, 1021, 393, 1352, 420, 436, 975, 96, 768, 1302, 146, 781, 515, 1418, 268, 660, 1012, 938, 416, 1073, 106, 346, 803, 1180, 1071, 773, 947, 129, 337, 180, 943, 58, 1385, 1168, 1171, 332, 69, 1339, 1059, 582, 51, 1360, 659, 390, 1008, 862, 100, 1184, 518, 1043, 842, 431, 347, 146, 487, 1003, 238, 1384, 1047, 880, 650, 1132, 9, 298, 1148, 288, 379, 505, 595, 1286, 242, 921, 451, 210, 560, 78, 518, 604, 340, 313, 1004, 145, 1065, 312, 944, 582, 907, 1314, 149, 677, 1235, 908, 844, 815, 982, 366, 1215, 1232, 747, 1037, 547, 531, 23, 1168, 1316, 1280, 779, 243, 29, 523, 556, 758, 216, 421, 995, 1025, 1345, 419, 1083, 417, 347, 1387, 1108, 864, 1119, 918, 954, 842, 383, 845, 423, 758, 627, 394, 1197, 208, 185, 1192, 741, 1026, 480, 280, 1127, 253, 841, 363, 710, 1138, 242, 844, 653, 579, 1135, 818, 314, 747, 607, 1322, 1416, 776, 948, 707, 268, 528, 139, 199, 496, 15, 1359, 671, 1285, 412, 412, 439, 1067, 283, 432, 1100, 659, 703, 833, 168, 146, 962, 714, 106, 48, 1337, 221, 1337, 538, 215, 1317, 755, 844, 1280, 1225, 267, 1298, 1166, 1325, 794, 1126, 1209, 664, 1318, 861, 165, 748, 1284, 1127, 1125, 169, 738, 957, 1132, 510, 415, 444, 996, 945, 376, 248, 509, 981, 1247, 1387, 563, 1107, 124, 647, 1281, 1365, 300, 284, 921, 972, 339, 659, 1004, 32, 1322, 1240, 848, 408, 399, 909, 209, 522, 480, 1310, 856, 737, 464, 244, 1085, 24, 771, 1264, 1298, 1007, 273, 89, 403, 717, 283, 1143, 1141, 606, 194, 1380, 561, 722, 812, 167, 1338, 862, 1404, 143, 910, 851, 723, 149, 745, 1191, 1363, 644, 1271, 648, 906, 1128, 354, 228, 1049, 984, 124, 143, 185, 335, 699, 1231, 792, 1068, 844, 279, 377, 1178, 380, 929, 305, 1384, 1008, 705, 57, 491, 1036, 994, 771, 295, 296, 1247, 234, 870, 52, 668, 486, 589, 1348, 608, 1293, 360, 49, 477, 375, 4, 33, 463, 1361, 335, 1327, 527, 1052, 947, 592, 516, 993, 59, 369, 483, 1205, 601, 932, 1301, 1380, 981, 846, 1108, 1031, 1248, 1346, 922, 466, 1039, 917, 89, 643, 725, 1278, 931, 229, 1159, 107, 1337, 200, 924, 209, 106, 600, 1001, 1239, 1270, 1037, 91, 420, 564, 589, 63, 299, 1128, 942, 1146, 108, 1118, 602, 909, 500, 1211, 1133, 682, 1019, 1198, 1167, 26, 85, 1225, 450, 1144, 459, 641, 992, 588, 368, 1352, 1304, 1414, 525, 901, 289, 1003, 569, 839, 1327, 583, 1362, 1266, 1087, 399, 571, 1415, 241, 818, 4, 186, 24, 59, 391, 170, 1348, 666, 1347, 676, 466, 1020, 1251, 1039, 540, 1322, 240, 1053, 791, 147, 440, 903, 104, 193, 997, 48, 683, 1288, 1004, 308, 198, 668, 319, 673, 302, 40, 1027, 1274, 525, 1123, 1156, 1049, 833, 721, 626, 762, 1381, 126, 154, 232, 785, 1276, 965, 410, 952, 1212, 841, 1220, 1133, 311, 964, 1213, 1378, 931, 318, 1218, 158, 888, 534};
            return 0;
        }
        int[] indicesA = new int[this.M]; //alter this.M based on qThresh
        int[] indicesB = new int[this.M];

        Random rand = new Random();

        for (int i = 0; i < this.M; i++){
            int currNt = this.getNtList(iter);
            indicesA[i] = rand.nextInt(this.M - currNt) + currNt;
            indicesB[i] = rand.nextInt(this.M - currNt) + currNt;
            while(indicesA[i] == indicesB[i]){
                indicesA[i] = rand.nextInt(this.M - currNt) + currNt;
            }
        }

        RealVector transformedDists;
        RealVector trueDists;
        int K = transformedData.getColumnDimension();

        int[] allIndices = new int[this.N];

        for (int i = 0; i < this.N; i++){
            allIndices[i] = i; //TODO: this is stupid
        }
        int[] kIndices = Arrays.copyOf(allIndices,K);

        transformedDists = this.calcDistances(transformedData.getSubMatrix(indicesA,kIndices), transformedData.getSubMatrix(indicesB, kIndices)).mapMultiply(Math.sqrt(this.N/this.Nproc));
        trueDists = this.calcDistances(this.rawDataMatrix.getSubMatrix(indicesA,allIndices), this.rawDataMatrix.getSubMatrix(indicesB,allIndices));
        return this.LBR(trueDists, transformedDists);
    }

    @Override
    public int getNextNt(int iter, int K, int num_Nt) {
        //int[] Nts = {11,12,13,14,15,16,17,18,19,20,21,22,23,25,30,35,40,45,50,55,60, 65,70,80,90,100,110,125,150,175,200,300,400,500,600};
        int[] Nts = {21,22,23,25,30,35,40,45,50,55,60, 65,70,80,90,100,110,125,150,175,200,300,400,500,600};
        if (iter >= Nts.length) {
            this.NtList.add(2000000);
            return 2000000;
        }
        this.NtList.add(Math.max(K+1,Nts[iter]));
        return Math.max(K+1,Nts[iter]);

        /*
        int interval = this.M/num_Nt;
        if (iter == 0){
            this.NtList.add(Math.max(K+1,interval)); //this is to make sure we have at least K+1 samples for PCASVD, +1 for edge effects
            return Math.max(K+1,interval);
        }
        this.NtList.add(interval + this.NtList.get(iter-1));
        return this.NtList.get(iter);
        */
    }
}

